<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../lib/Candle.php';

/**
 * Test class for Candle.
 * Generated by PHPUnit on 2011-03-08 at 14:27:01.
 */
class CandleTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testFormatTime() {
        $this->assertEquals('0:00', Candle::formatTime(0));
        $this->assertEquals('0:05', Candle::formatTime(5));
        $this->assertEquals('1:00', Candle::formatTime(60));
        $this->assertEquals('1:05', Candle::formatTime(65));
        $this->assertEquals('16:30', Candle::formatTime(990));
        $this->assertEquals('18:10', Candle::formatTime(1090));
    }

    public function testFormatTimeAmount() {
        $this->assertEquals('-', Candle::formatTimeAmount(0));
        $this->assertEquals('25m', Candle::formatTimeAmount(25));
        $this->assertEquals('1h', Candle::formatTimeAmount(60));
        $this->assertEquals('1h 25m', Candle::formatTimeAmount(85));
    }

    public function testFormatShortDay() {
        $this->assertEquals('Po', Candle::formatShortDay(0));
        $this->assertEquals('Ut', Candle::formatShortDay(1));
        $this->assertEquals('St', Candle::formatShortDay(2));
        $this->assertEquals('Št', Candle::formatShortDay(3));
        $this->assertEquals('Pi', Candle::formatShortDay(4));
    }

    /**
     * @todo Implement testFormatLongDay().
     */
    public function testFormatLongDay() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testParseDay() {
        $this->assertEquals(0, Candle::parseDay('Pondelok'));
        $this->assertEquals(1, Candle::parseDay('Utorok'));
        $this->assertEquals(2, Candle::parseDay('Streda'));
        $this->assertEquals(3, Candle::parseDay('Stvrtok'));
        $this->assertEquals(3, Candle::parseDay('Štvrtok'));
        $this->assertEquals(4, Candle::parseDay('Piatok'));
        $this->assertEquals(0, Candle::parseDay('Po'));
        $this->assertEquals(1, Candle::parseDay('Ut'));
        $this->assertEquals(2, Candle::parseDay('St'));
        $this->assertEquals(3, Candle::parseDay('Stv'));
        $this->assertEquals(3, Candle::parseDay('Št'), 'Kratky stvrtok');
        $this->assertEquals(4, Candle::parseDay('Pi'));
        $this->assertEquals(false, Candle::parseDay('Blabla'));
        $this->assertEquals(0, Candle::parseDay('pondelok'));
        $this->assertEquals(3, Candle::parseDay('stvrtok'));
        $this->assertEquals(1, Candle::parseDay('ut'));
        $this->assertEquals(4, Candle::parseDay('pi'));
    }

    public function testFormatRowspan() {
        $this->assertEquals('', Candle::formatRowspan(0));
        $this->assertEquals('', Candle::formatRowspan(1));
        $this->assertEquals(' rowspan="2" ', Candle::formatRowspan(2));
    }

    /**
     * @todo Implement testFormatClass().
     */
    public function testFormatClass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFormatTD().
     */
    public function testFormatTD() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testFloorTo() {
        $this->assertEquals(0, Candle::floorTo(30, 60));
        $this->assertEquals(0, Candle::floorTo(0, 60));
        $this->assertEquals(60, Candle::floorTo(60, 60));
        $this->assertEquals(60, Candle::floorTo(69,60));
        $this->assertEquals(30, Candle::floorTo(30, 15));
    }

    public function testCeilTo() {
        $this->assertEquals(60, Candle::ceilTo(30, 60));
        $this->assertEquals(0, Candle::ceilTo(0, 60));
        $this->assertEquals(60, Candle::ceilTo(40, 30));
        $this->assertEquals(60, Candle::ceilTo(60, 60));
    }

    /**
     * @todo Implement testDayFromCode().
     */
    public function testDayFromCode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testNbsp().
     */
    public function testNbsp() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testFormatShortName() {
        $this->assertEquals('Ľ. Vráskavý', Candle::formatShortName(array('given_name'=>'Ľubomír', 'family_name'=>'Vráskavý')));
        $this->assertEquals('Vráskavý', Candle::formatShortName(array('family_name'=>'Vráskavý')));
        $this->assertEquals('I. Bud', Candle::formatShortName(array('given_name'=>'Igor', 'family_name'=>'Bud')));
        $this->assertEquals('Š. Alexander', Candle::formatShortName(array('given_name'=>'Šaňo', 'family_name'=>'Alexander')));
    }

    /**
     * @todo Implement testFormatShortNameList().
     */
    public function testFormatShortNameList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFormatLongName().
     */
    public function testFormatLongName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetTimetableExportResponse().
     */
    public function testSetTimetableExportResponse() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetResponseFormat().
     */
    public function testSetResponseFormat() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLessonTypeHTMLClass().
     */
    public function testGetLessonTypeHTMLClass() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddFormat().
     */
    public function testAddFormat() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testSubjectShortCodeFromLongCode() {
        $this->assertEquals('1-UBI-004-1', Candle::subjectShortCodeFromLongCode('PriF/1-UBI-004-1/7064/00'));
        $this->assertEquals('1-UBI-007-1', Candle::subjectShortCodeFromLongCode('PriF/1-UBI-007-1/7054/00'));
        $this->assertEquals('1-INF-465', Candle::subjectShortCodeFromLongCode('FMFI.KI/1-INF-465/00'));
        $this->assertEquals('1-INF-500-2', Candle::subjectShortCodeFromLongCode('FMFI.KI/1-INF-500-2/3051/00'));
        $this->assertEquals(false, Candle::subjectShortCodeFromLongCode('bla bla'));
    }

    public function testIsSubjectShortCode() {
        $this->assertTrue(Candle::isSubjectShortCode('1-INF-100'));
        $this->assertEquals(true, Candle::isSubjectShortCode('1-INF-100-1'));
        $this->assertEquals(false, Candle::isSubjectShortCode('PriF/1-UBI-004-1/7064/00'));
        $this->assertEquals(false, Candle::isSubjectShortCode('volaco'));
    }

    public function testSubjectShortCode() {
        $this->assertEquals('1-INF-100', Candle::subjectShortCode('1-INF-100'));
        $this->assertEquals('1-INF-100-1', Candle::subjectShortCode('1-INF-100-1'));
        $this->assertEquals('1-UBI-004-1', Candle::subjectShortCode('PriF/1-UBI-004-1/7064/00'));
        $this->assertEquals(false, Candle::subjectShortCode('volaco'));
    }

    public function testSubjectShorterCode() {
        $this->assertEquals('1-INF-100', Candle::subjectShorterCode('1-INF-100'));
        $this->assertEquals('1-INF-100', Candle::subjectShorterCode('1-INF-100-1'));
        $this->assertEquals(false, Candle::subjectShorterCode('bla bla'));
    }

    public function testUpper() {
        $this->assertEquals('SLANINA', Candle::upper('Slanina'));
        $this->assertEquals('PIŠKÓT', Candle::upper('Piškót'));
    }

    public function testLower() {
        $this->assertEquals('vidly', Candle::lower('VidlY'));
        $this->assertEquals('čajník', Candle::lower('ČAJNÍK'));
    }

    public function testStartsWith() {
        $this->assertTrue(Candle::startsWith('String',''));
        $this->assertTrue(Candle::startsWith('String','Str'));
        $this->assertTrue(!Candle::startsWith('String','str'));
        $this->assertTrue(Candle::startsWith('String','str', true));
        $this->assertTrue(Candle::startsWith('String','String'));
        $this->assertTrue(!Candle::startsWith('String','Stringa'));
        $this->assertTrue(Candle::startsWith('',''));
    }

    public function testParseDate() {
        $this->assertEquals(mktime(0,0,0,1,2,2010), Candle::parseDate('2010-01-02'));
    }

    /**
     * @todo Implement testMakeSubjectInfoLink().
     */
    public function testMakeSubjectInfoLink() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
?>
