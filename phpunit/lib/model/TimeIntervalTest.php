<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../lib/model/TimeInterval.class.php';

/**
 * Test class for TimeInterval.
 * Generated by PHPUnit on 2011-03-09 at 21:59:47.
 */
class TimeIntervalTest extends PHPUnit_Framework_TestCase {

    /**
     * @var TimeInterval
     */
    private $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

    /**
     * @var array
     */
    private $arr1, $arr2, $arr3;

    /**
     * @var array
     */
    private $triples;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->i1 = new TimeInterval(123,456);
        $this->i2 = new TimeInterval(1440+123, 1440+456);
        $this->i3 = new TimeInterval(1440, 2*1440);
        $this->i4 = new TimeInterval(1440+123, 2*1440+1);
        $this->i5 = new TimeInterval(234, 567);
        $this->i6 = new TimeInterval(456, 789);
        $this->i7 = new TimeInterval(500, 1000);
        $this->i8 = new TimeInterval(2*1440+500, 4*1440+400);

        $this->arr1 = array($this->i1, $this->i2, $this->i3, $this->i4, $this->i5, $this->i8);
        $this->arr2 = array(new TimeInterval(123, 567),
                        new TimeInterval(1440, 2*1440+1),
                        new TimeInterval(2*1440+500, 4*1440+400)
                    );
        $this->arr3 = array(new TimeInterval(123, 567),
                        new TimeInterval(1440, 2*1440),
                        new TimeInterval(2*1440, 2*1440+1),
                        new TimeInterval(2*1440+500, 3*1440),
                        new TimeInterval(3*1440, 4*1440),
                        new TimeInterval(4*1440, 4*1440+400)
                    );
        $this->triples = array(
            array(0, 123, 567),
            array(1, 0, 1440),
            array(2, 0, 1),
            array(2, 500, 1440),
            array(3, 0, 1440),
            array(4, 0, 400),

                );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testContains() {
        $this->assertTrue($this->i1->contains(200));
        $this->assertTrue($this->i1->contains(123));
        $this->assertTrue($this->i1->contains(456));
        $this->assertFalse($this->i1->contains(100));
        $this->assertFalse($this->i1->contains(500));
    }

    public function testIntersects() {
        $this->assertTrue($this->i1->intersects($this->i5));
        $this->assertTrue($this->i5->intersects($this->i1));
        $this->assertTrue($this->i1->intersects($this->i6));
        $this->assertTrue($this->i6->intersects($this->i1));
        $this->assertFalse($this->i1->intersects($this->i7));
        $this->assertFalse($this->i7->intersects($this->i1));
    }

    public function testExtend() {
        $this->assertEquals(123, $this->i1->extend($this->i5)->getStart());
        $this->assertEquals(567, $this->i1->extend($this->i5)->getEnd());
        $this->assertEquals(123, $this->i5->extend($this->i1)->getStart());
        $this->assertEquals(567, $this->i5->extend($this->i1)->getEnd());
    }

    public function testUnion() {
        $this->assertEquals(null, $this->i1->union($this->i7));
        $this->assertNotEquals(null, $this->i1->union($this->i5));
        $this->assertEquals(123, $this->i1->union($this->i5)->getStart());
        $this->assertEquals(567, $this->i1->union($this->i5)->getEnd());
    }

    public function testGetStart() {
        $this->assertEquals(123, $this->i1->getStart());
    }

    public function testGetEnd() {
        $this->assertEquals(456, $this->i1->getEnd());
    }

    /**
     * @todo Implement testGetLength().
     */
    public function testGetLength() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGetStartDay() {
        $this->assertEquals(0, $this->i1->getStartDay());
        $this->assertEquals(1, $this->i2->getStartDay());
    }

    public function testGetStartTime() {
        $this->assertEquals(123, $this->i1->getStartTime());
        $this->assertEquals(123, $this->i2->getStartTime());
    }

    public function testGetEndDay() {
        $this->assertEquals(0, $this->i1->getEndDay());
        $this->assertEquals(1, $this->i2->getEndDay());
    }

    public function testGetEndTime() {
        $this->assertEquals(456, $this->i1->getEndTime());
        $this->assertEquals(456, $this->i2->getEndTime());
    }

    public function testOverlapsDay() {
        $this->assertFalse($this->i1->overlapsDay());
        $this->assertFalse($this->i2->overlapsDay());
        $this->assertFalse($this->i3->overlapsDay());
        $this->assertTrue($this->i4->overlapsDay());
    }

    /**
     * @todo Implement testIsEmpty().
     */
    public function testIsEmpty() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testIntersect() {
        $this->assertTrue(TimeInterval::intervalArraysEqual(array($this->i1->intersect($this->i5)), array(new TimeInterval(234, 456))));
        $this->assertTrue(TimeInterval::intervalArraysEqual(array($this->i1->intersect($this->i6)), array(new TimeInterval(456, 456))));
        $this->assertEquals(0, $this->i1->intersect($this->i7)->getLength());
    }

    public function testIntersectArray() {
        $this->assertTrue(TimeInterval::intervalArraysEqual($this->i5->intersectArray(array($this->i1, $this->i6)),
                                array(new TimeInterval(234, 456), new TimeInterval(456, 567))));
    }

    public function testToString() {
        $this->assertEquals('Po 2:03-7:36', $this->i1->toString());
        $this->assertEquals('Ut 2:03-7:36', $this->i2->toString());
        $this->assertEquals('Ut 0:00-24:00', $this->i3->toString());
        $this->assertEquals('Ut 2:03-St 0:01', $this->i4->toString());
    }

    /**
     * @todo Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testMergeIntervals() {
        $this->assertTrue(TimeInterval::intervalArraysEqual(TimeInterval::mergeIntervals($this->arr1), $this->arr2));
    }

    public function testSplitIntervalsByDays() {
        $this->assertTrue(TimeInterval::intervalArraysEqual(TimeInterval::splitIntervalsByDays($this->arr2), $this->arr3),'splitIntervalsByDays');
    }

    public function testConvertIntervalsToTriplesArray() {
        $this->assertEquals($this->triples, TimeInterval::convertIntervalsToTriplesArray($this->arr3), 'convertIntervalsToTriplesArray');
    }

    /**
     * @todo Implement testOptimizeIntervals().
     */
    public function testOptimizeIntervals() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCompareByStart().
     */
    public function testCompareByStart() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testIntervalArraysEqual() {
        $this->assertTrue(TimeInterval::intervalArraysEqual($this->arr1, $this->arr1));
        $this->assertFalse(TimeInterval::intervalArraysEqual($this->arr1, $this->arr2));
    }

    /**
     * @todo Implement testFromTriple().
     */
    public function testFromTriple() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFilterByMinLength().
     */
    public function testFilterByMinLength() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
?>
